#+options: ':nil *:t -:t ::t <:t H:3 \n:nil ^:nil arch:headline author:t
#+options: broken-links:nil c:nil creator:nil d:(not "LOGBOOK") date:t e:t
#+options: email:nil f:t inline:t num:t p:nil pri:nil prop:nil stat:t tags:t
#+options: tasks:t tex:t timestamp:t title:t toc:t todo:t |:t
#+title: MythTV stream DASH and HLS fMP4
#+date: <2023-10-15 Sun>
#+author: Dennis Alders
#+email: (concat "dennis.alders" at-sign "gmail.com")
#+language: en
#+select_tags: export
#+exclude_tags: noexport
#+creator: Emacs 28.2 (Org mode 9.6.10)
#+cite_export:

* Description
:PROPERTIES:
:ID:       465d8cb3-3907-4450-93f9-0d252a18244a
:END:

HTTP Live streaming support for [[https://www.mythtv.org][MythTV]].

Why:
- Although support was added for HTTP Live Streaming (HLS) to MythTV in 0.25 it
  is still not usable.
- MythWeb is based on Flash technology from the days of yore.
- An attempt to overcome these shortcomings in github project [[https://github.com/thecount2a/mythtv-stream-mpeg-dash][MythTV stream mpeg
  DASH]] lacks support for HLS, Adaptive Bitrate Streaming (ABR), live
  recording, live broadcast, subtitles, etcetera.

What:
- Support for HTTP based streaming (serving) of MythTV content to other devices:
  web browserâ€”mobile, desktop, tablet, etc.
- Support for live broadcasts and prerecorded content.
- Support for offline viewing.

How:
- Fragmented MP4 (fMP4) is used to make DASH compatible with HLS so the same
  files are used; only the manifest file (playlist) is different.
- Encode MythTV content providing playlist types $live$, $event$ and $VOD$.
- HW supported transcoding for VAAPI (support for QSV and NVEC untested).
- Video is codified in H.264 format and audio in AAC.
- Transcode videos to user defined (UI select dropdown list) renditions for
  adaptive playback.
- Simple PHP browser UI.
- Transcode to $mp4$ for playback on mobile devices without internet.
- A ramdisk can be used for in memory playback of playlist type $live$.

Supports the following use cases:
- Device independent viewing.
- Support for less reliable networks (e.g. cell phone browser).
- Transcoding to MP4 for offline viewing.
- Streaming while encoding.
- Streaming of live broadcast content en prerecorded content.
- Support for MythTV cutlist (commercial cut) created using Mythfrontend.
- Support for live HDHomeRun streaming without MythTV.

* Installation
:PROPERTIES:
:ID:       e32a386c-b67a-4701-ae52-5c145c18d930
:END:
- MythTV (for commerical cut info and looking up the name of each recording
  based on filename)
  - version v0.33
- FFmpeg (for transcoding)
  - FFmpeg version 5.1.3
- GNU screen
  - This is to allow monitoring of transcode and packager and to support
    background processes launched by the web-facing PHP script
  - apt-get install screen
- Shaka player
  - This is the Javascript-based browser player that plays MPEG DASH content
  - version 4.3.6
- Mediainfo
- HDHomeRun
* Features
:PROPERTIES:
:ID:       b75aeef0-0fd8-4790-91f5-abc7730e1a94
:END:

Feature support for live broadcast and recorded video are shown in table 1.

#+caption: Feature support for live broadcast and recorded video.
#+label: feature-types
#+attr_latex: :width 350px :options angle=90
|       | hls | dash | subtitle    | subtitle          | Adaptive  |
|       |     |      | (real-time) | (post-processing) | Bitrate   |
|       |     |      |             |                   | Streaming |
|-------+-----+------+-------------+-------------------+-----------|
| live  | âœ…  |      | âœ…          |                   | âœ…        |
| event | âœ…  |      | âœ…          |                   | âœ…        |
| VOD   | âœ…  | âœ…   | âœ…          |                   | âœ…        |
| mp4   |     |      |             | âœ…                |           |

All possible combinations of playlist types and mp4 are shown in table 3. Note,
all can be combined with $Quality$, $Commercial cut$ and $subtitles$ selection.

#+caption: All possible combinations of streaming types. Note, all can be combined with Quality, Commercial cut and subtitles.
#+label: feature-types
#+attr_latex: :width 350px :options angle=90
| live | event | VOD | mp4 |
|------+-------+-----+-----|
| âœ…   |       |     |     |
| âœ…   |       | âœ…  |     |
| âœ…   |       |     | âœ…  |
| âœ…   |       | âœ…  | âœ…  |
|      | âœ…    |     |     |
|      | âœ…    | âœ…  |     |
|      | âœ…    |     | âœ…  |
|      | âœ…    | âœ…  | âœ…  |
|      |       | âœ…  |     |
|      |       |     | âœ…  |
|      |       | âœ…  | âœ…  |

Table 4, 5, 6 and 7 show the player features while using the rendition: 720p
high, 480p normal, 360p low, 240p low. As is shown feature support varies.

#+caption: player.configure('streaming.useNativeHlsOnSafari', true); on Safari m3u8 player
#+label: usenativehlsonsafari-true-safari-m3u8e
#+attr_latex: :width 350px :options angle=90
|       | Progress bar | Subtitles        | Resolution | Language                             |
|-------+--------------+------------------+------------+--------------------------------------|
| live  | ðŸ”´           | Dutch            | ðŸ”´         | (Dutch (audio_0)),..,Dutch (audio_2) |
| event | ðŸ”´           | Dutch            | ðŸ”´         | (Dutch (audio_0)),..,Dutch (audio_2) |
| VOD   | ðŸ”´           | Dutch            | ðŸ”´         | (Dutch (audio_4)),..,Dutch (audio_6) |
| mp4   | âœ…           | weet ik nog niet | ðŸ”´         | ðŸ”´                                   |

#+caption: player.configure('streaming.useNativeHlsOnSafari', true); on Safari Shaka Player
#+label: usenativehlsonsafari-true-safari-shaka-player
#+attr_latex: :width 350px :options angle=90
|       | Progress bar  | Captions         | Resolution (720p,..,240p) | Language                                    | Quality          |
|-------+---------------+------------------+---------------------------+---------------------------------------------+------------------|
| live  | âœ… (1 minute) | Nederlands       | Auto (nullp)              | Nederlands                                  | ðŸ”´               |
| event | âœ…            | Nederlands       | Auto (nullp)              | Nederlands                                  | ðŸ”´               |
| VOD   | âœ…            | Nederlands       | Auto (nullp)              | Nederlands,Nederlands  (2 out off 3 tracks) | ðŸ”´               |
| mp4   | âœ…            | weet ik nog niet | ðŸ”´                        | Nederlands                                  | Auto (0 kbits/s) |

#+caption: player.configure('streaming.useNativeHlsOnSafari', false); on Safari Shaka Player
#+label: usenativehlsonsafari-false-safari-shaka-player
#+attr_latex: :width 350px :options angle=90
|       | Progress bar | Captions         | Resolution    | Language   | Quality          |
|-------+--------------+------------------+---------------+------------+------------------|
| live  | ðŸ”´           | âœ…  (off)        | 240p          | ðŸ”´         | ðŸ”´               |
| event | âœ…           | âœ…  (off)        | 720p,.., 240p | Nederlands | ðŸ”´               |
| VOD   | ðŸ”´           | âœ…  (off)        | 720p,.., 240p | Nederlands | ðŸ”´               |
| mp4   | âœ…           | weet ik nog niet | ðŸ”´            | Nederlands | Auto (0 kbits/s) |

#+caption: player.configure('streaming.useNativeHlsOnSafari', false); on Safari m3u8 player
#+label: usenativehlsonsafari-false-safari-m3u8
#+attr_latex: :width 350px :options angle=90
|       | Progress bar | Subtitles        | Resolution | Language                             |
|-------+--------------+------------------+------------+--------------------------------------|
| live  | ðŸ”´           | âœ…               | ðŸ”´         | ðŸ”´                                   |
| event | ðŸ”´           | âœ…               | ðŸ”´         | (Dutch (audio_0)),..,Dutch (audio_2) |
| VOD   | ðŸ”´           | âœ…               | ðŸ”´         | (Dutch (audio_4)),..,Dutch (audio_6) |
| mp4   | âœ…           | weet ik nog niet | ðŸ”´         | ðŸ”´                                   |

* Example
:PROPERTIES:
:ID:       9a8352eb-150b-4c83-a0fd-30edde384457
:END:

** User interface
:PROPERTIES:
:ID:       44b7aab1-f15c-4269-9c76-ff103490740d
:END:

Figure 1: User interface.
#+CAPTION: User interface
#+ATTR_HTML: :alt User selection :title User selection :align right
#+ATTR_HTML::alt image
#+ATTR_HTML: :width 350px
#+ATTR_LATEX: :width 350px :options angle=90
#+LABEL: user-interface
[[file:screenshots/user-selection.png]]

User interface:
- Select an available recording list box. Note, leave as is since we are
  defining the settings for this recording.
- Select the ABR renditions from the select dropdown list box.
- Select if the $Cutlist$ should be used using the list box. Note, this option
  is only visible in the UI when a $Cutlist$ is defined in MythTV.
- Select using the checkbox if $Subtitles$ should be used or not. Note, this
  option is only visible when subtitles are available in the video file.
- Select using the checkboxes if playlist type $live$ or $event$ should be
  used. Note, either one of the two or none at all.
- Select using the checkbox if playlist type $VOD$ should be used.
- Select using the checkbox if a $MP4$ file should be created.
- Press $Encode Video$ when you are satisfied with your choices to start
  encoding.

The selections shown in Figure 1 are used in the descriptions below.

** Button to Delete Video Files and status button for Messages
:PROPERTIES:
:ID:       23f8752d-7be6-49b5-9137-8f92fd69def2
:END:

Figure 2: Remuxing.
#+CAPTION: Remuxing
#+ATTR_HTML: :alt Remuxing video :title Remuxing video :align right
#+ATTR_HTML::alt image
#+ATTR_HTML: :width 350px
#+ATTR_LATEX: :width 350px :options angle=90
#+LABEL: remuxing-video
[[file:screenshots/remuxing-video.png]]

In Figure 2 two buttons are shown below the available recording list box.

The first button $Delete Video Files$ basically does what is says. Note, this
will not delete any file from MythTV or change the MySQL database. All files can
be recreated as long as the recording is available in MythTV.

The second status button displays a dynamic message. Figure 2 shows the
$Remuxing Video$ percentage. $Cut Commercials$ selected in Figure 1 requires the
video to be remuxed to a MP4 container.

** Generating video
:PROPERTIES:
:ID:       95d98a33-0176-4f37-a635-c2f9988422b7
:END:

Figure 3: Generating video
#+CAPTION: Generating video
#+ATTR_HTML: :alt Generating video :title Generating video :align right
#+ATTR_HTML::alt image
#+ATTR_HTML: :width 350px
#+ATTR_LATEX: :width 350px :options angle=90
#+LABEL: generating-video
[[file:screenshots/generating-video.png]]

The progress of the encoding is shown on the second button as a percentage and
the time of the video available. When there is about 30 seconds of video
available the player automatically tries to load the video.

Note, loading only works for live streaming. If no still of the video is shown
after 30 seconds, as the case in this example, reload the browser page and start
the video for viewing.

** Status button
:PROPERTIES:
:ID:       5a91dae1-6e17-4c0a-ba7f-566fa21a06c6
:END:

Figure 4: Status.
#+CAPTION: Status
#+ATTR_HTML: :alt Status :title Status :align right
#+ATTR_HTML::alt image
#+ATTR_HTML: :width 350px
#+ATTR_LATEX: :width 350px :options angle=90
#+LABEL: status
[[file:screenshots/status.png]]

One can also select and hold the second button. This will trigger a popup
message box with a detailed view of the steps involved and the status
thereof.

** User interface after encoding
:PROPERTIES:
:ID:       c7963ff4-1ee0-40c5-9d2d-8444518b3743
:END:

Figure 5: User interface after encoding.
#+CAPTION: User interface
#+ATTR_HTML: :alt User interface :title User Interface :align right
#+ATTR_HTML::alt image
#+LABEL: user-interface
#+ATTR_HTML: :width 350px
#+ATTR_LATEX: :width 350px :options angle=90
[[file:screenshots/user-interface.png]]

Reloading the browser page (during encoding) may reveal links to the playlist
types requested, as shown in Figure 5 for $HLS Event$ and $VOD$. Old devices not
supporting the Shaka video player of the UI, may still be able to play media
through the links provided. The links can also be used in your favorite app.

When the encoding is finished, in the example at hand the message button shows
$VOD Video Available$, refresh the browser page. Next to the $Delete Video
files$ button a new button appeared $Cleanup Video Files$. Note, his button is
only shown when both playlist types $event$ and $VOD$ were selected as shown in
Figure 1. Since both playlist types basically provide similar user experience
one may decide to remove the playlist $event$ content to reduce disk space. This
is exactly what the $Cleanup Video Files$ button does.

The UI also shows a $Download mp4$ link as selected in Figure 1. The latter is
only visible when the encoding has finished and optionally subtitles are mixed
in.

Figure 5 also displays the Shaka player options: Captions, Resolution, Language,
Picture-in-Picture, Playback speed, and Airplay (on MacOs). For more information
about player features see table 4, 5, 6 and 7 above.

* Generated script
:PROPERTIES:
:ID:       78c95423-4574-4893-b883-6d7f4836b2ca
:END:

After pressing the $Encode Video$ in Figure 1 a shell script called $encode.sh$
is generated. For illustration purposes the code for the running example is
shown in separate code blocks below.

** Remuxing
:PROPERTIES:
:ID:       52296037-93f1-4f02-9bdb-675cf7691b08
:END:

The user in Figure 1 selected $Cut Commercials$. This requires the input video
to be remuxed to a $MP4$ container. The code block below shows how this is done.

A $MP4$ container allows FFmpeg to use the $concat demuxer$ later in the script.
Note, the $cutlist$ itself was defined in MythTV which is translated into the
inpoint's and outpoint's of the $cutlist$ for the video.

#+begin_src shell -n
cd /var/www/html/hls/10100_20231012201900
/usr/bin/sudo /usr/bin/screen -S 10100_20231012201900_remux -dm /usr/bin/sudo -uapache /usr/bin/bash -c '/usr/bin/echo `date`: remux start > /var/www/html/hls/10100_20231012201900/status.txt ; \
/usr/bin/sudo -uapache /usr/bin/ffmpeg \
                                       -y \                                                                            # Overwrite without asking
                                       -hwaccel vaapi -vaapi_device /dev/dri/renderD128 -hwaccel_output_format vaapi \ # Use Hardware acceleration
                                       -txt_format text -txt_page 888 \                                                # extract subtitles from dvb_teletext
                                       -fix_sub_duration \                                                             # avoid ovelap of subtitles
                                       -i /mnt/mythtv2/store//10100_20231012201900.ts \                                # input file recorded with HDHomeRun
                                       -c copy \                                                                       # use encoder copy for audio and video
                                       -c:s mov_text \                                                                 # set subtitle codec to mov_text
                                       /var/www/html/hls/10100_20231012201900/video.mp4 && \                           # output file in mp4 format
/usr/bin/echo `date`: remux finish success >> /var/www/html/hls/10100_20231012201900/status.txt || \
/usr/bin/echo `date`: remux finish failed >> /var/www/html/hls/10100_20231012201900/status.txt'
while [ ! "`/usr/bin/cat /var/www/html/hls/10100_20231012201900/status.txt | /usr/bin/grep 'remux finish success'`" ] ; \
do \
    sleep 1; \
done
#+end_src

** Adapt playlist $master_event.m3u8$ file when created for handling subtitles
:PROPERTIES:
:ID:       1c41d2a9-1f1d-4214-8d93-89c63da02a6f
:END:

Adapt the playlist $master_event.m3u8$ file for subtitles as soon as the file is created by FFmpeg some time in the future:

#+begin_src shell +n
(while [ ! -f "/var/www/html/hls/10100_20231012201900/master_event.m3u8" ] ; \
 do \
        /usr/bin/inotifywait -e close_write --include "master_event.m3u8" /var/www/html/hls/10100_20231012201900; \
 done; \
    /usr/bin/sudo -uapache /usr/bin/sed -i -E 's/(#EXT-X-VERSION:7)/\1\n#EXT-X-MEDIA:TYPE=SUBTITLES,GROUP-ID="subtitles",NAME="Dutch",DEFAULT=YES,FORCED=NO,AUTOSELECT=YES,URI="sub_0_vtt.m3u8",LANGUAGE="dut"/' /var/www/html/hls/10100_20231012201900/master_event.m3u8; \
    /usr/bin/sudo -uapache /usr/bin/sed -i -E 's/(#EXT-X-STREAM.*)/\1,SUBTITLES="subtitles"/'  /var/www/html/hls/10100_20231012201900/master_event.m3u8; /usr/bin/sudo -uapache /usr/bin/sed -e :a -e '$d;N;2,6ba' -e 'P;D' -i /var/www/html/hls/10100_20231012201900/master_event.m3u8;) &
#+end_src

** Adapt playlist $master_vod.m3u8$ file when created for handling subtitles
:PROPERTIES:
:ID:       0be38d35-c457-426f-8812-6ce6483aa593
:END:

Adapt the playlist $master_vod.m3u8$ file for subtitles as soon as the file is created by FFmpeg some time in the future:

#+begin_src shell +n
(while [ ! -f "/var/www/html/vod/10100_20231012201900/master_vod.m3u8" ] ; \
 do \
        /usr/bin/inotifywait -e close_write --include "master_vod.m3u8" /var/www/html/vod/10100_20231012201900; \
 done; \
    /usr/bin/sudo -uapache /usr/bin/sed -i -E 's/(#EXT-X-VERSION:7)/\1\n#EXT-X-MEDIA:TYPE=SUBTITLES,GROUP-ID="subtitles",NAME="Dutch",DEFAULT=YES,FORCED=NO,AUTOSELECT=YES,URI="sub_0_vtt.m3u8",LANGUAGE="dut"/' /var/www/html/vod/10100_20231012201900/master_vod.m3u8; \
    /usr/bin/sudo -uapache /usr/bin/sed -i -E 's/(#EXT-X-STREAM.*)/\1,SUBTITLES="subtitles"/' /var/www/html/vod/10100_20231012201900/master_vod.m3u8;) &
#+end_src

** Extract subtitles in a prepossessing step
:PROPERTIES:
:ID:       4ef2b0a7-2a2b-4055-9ce7-4c3a60b49638
:END:

This pre-processing is necessary to extract the subtitles from the recorded video:

#+begin_src shell +n
/usr/bin/sudo -uapache /usr/bin/bash -c '/usr/bin/echo `date`: subtitle_extract start >> /var/www/html/hls/10100_20231012201900/status.txt'; \
/usr/bin/sudo -uapache /usr/bin/mkdir -p /var/www/html/vod/10100_20231012201900; /usr/bin/sudo -uapache /usr/bin/mkdir -p /var/www/html/hls/10100_20231012201900; \
cd /var/www/html/hls/; \
/usr/bin/sudo -uapache /usr/bin/ffmpeg \
    -fix_sub_duration \
    -hwaccel vaapi -vaapi_device /dev/dri/renderD128 -hwaccel_output_format vaapi \
    -txt_format text -txt_page 888 \
    -f concat -async 1 -safe 0 -i /var/www/html/hls/10100_20231012201900/cutlist.txt \
    -map 0:s:0 -c:s webvtt \
     \
    -f tee \
    "[select=\'s:0,sgroup:subtitle\']10100_20231012201900/subtitles.vtt" \
2>>/tmp/ffmpeg-subtitle-extract-hls-10100_20231012201900.log && /usr/bin/sudo -uapache /usr/bin/bash -c '/usr/bin/echo `date`: subtitle_extract success >> /var/www/html/hls/10100_20231012201900/status.txt' || /usr/bin/sudo -uapache /usr/bin/bash -c '/usr/bin/echo `date`: subtitle_extract failed >> /var/www/html/hls/10100_20231012201900/status.txt'
while [ ! "`/usr/bin/cat /var/www/html/hls/10100_20231012201900/status.txt | /usr/bin/grep 'subtitle_extract success'`" ] ; \
do \
    sleep 1; \
done
#+end_src

** Add language information to playlist $master_vod.m3u8$ when created for audio
:PROPERTIES:
:ID:       7f650004-879b-42fa-9b04-59dabb2d9ddb
:END:

Add language information to the $master_vod.m3u8$ file as it is created by FFmpeg some time in the future:

#+begin_src shell +n
(while [ ! -f "/var/www/html/vod/10100_20231012201900/master_vod.m3u8" ] ; \
 do \
        /usr/bin/inotifywait -e close_write --include "master_vod.m3u8" /var/www/html/vod/10100_20231012201900; \
 done; \
    /usr/bin/sudo -uapache /usr/bin/sed -i -E 's/(#EXT-X-MEDIA:TYPE=AUDIO,GROUP-ID="group_A1")/\1,LANGUAGE="dut"/' /var/www/html/vod/10100_20231012201900/master_vod.m3u8;) &
#+end_src

** FFmpeg encoding
:PROPERTIES:
:ID:       9dcf9137-45c8-4e0f-93e0-f09ed28ab771
:END:

The major part of the encoding is done in one FFmpeg command utilizing
$filter_complex$ and $tee$ to the max. This code block starts the actual
encoding and waits until it is finished:

#+begin_src shell +n
/usr/bin/sudo -uapache /usr/bin/bash -c '/usr/bin/echo `date`: encode start >> /var/www/html/hls/10100_20231012201900/status.txt'; \
/usr/bin/sudo -uapache /usr/bin/mkdir -p /var/www/html/vod/10100_20231012201900;  /usr/bin/sudo -uapache /usr/bin/mkdir -p /var/www/html/hls/10100_20231012201900; \
cd /var/www/html/hls/; \
/usr/bin/sudo -uapache /usr/bin/ffmpeg \
    -hwaccel vaapi -vaapi_device /dev/dri/renderD128 -hwaccel_output_format vaapi \
     \
     \
    -f concat -async 1 -safe 0 -i /var/www/html/hls/10100_20231012201900/cutlist.txt \  # Respect the cutlist created by the user in MythTV
    -i 10100_20231012201900/subtitles.vtt \                             # Input subtitles seperately
    -progress 10100_20231012201900/progress-log.txt \                   # Track progress of encoding
    -live_start_index 0 \                                               # Segment index to start live streams at
    -force_key_frames "expr:gte(t,n_forced*2)" \                        # Fixed key frame interval is needed to avoid variable segment duration.
    -filter_complex "[0:v]split=2[v1][v2];[v1]scale_vaapi=w=1280:h=720[v1out];[v2]scale_vaapi=w=854:h=480[v2out]" \ # Resize A Video To Multiple Resolutions
    -map [v1out] -c:v:0 \                                               # Rendition 1
        h264_vaapi \                                                    # Use H264 VAAPI (Video Acceleration API) hardware acceleration
        -b:v:0 5000K -maxrate:v:0 5000K -bufsize:v:0 1.5*5000K \        # Transcode Video 1 to a user selected bitrate
        -preset veryslow \                                              # Best tradeoff for H264 between bitrate (file size) and quality
        -g 25 \                                                         # Set key frame placement
        -keyint_min 25 \                                                # Set minimum interval between IDR-frame
        -sc_threshold 0 \                                               # Sets the threshold for the scene change detection.
        -flags +global_header \                                         # Set global header in the bitstream.
    -map [v2out] -c:v:1 \                                               # Rendition 2
        h264_vaapi \                                                    # Use H264 VAAPI (Video Acceleration API) hardware acceleratio
        -b:v:1 1500K -maxrate:v:1 1500K -bufsize:v:1 1.5*1500K \        # Transcode Video 2 to a derived lower resolution based on a user selected bitrate
        -preset veryslow \                                              # Best tradeoff for H264 between bitrate (file size) and quality
        -g 25 \                                                         # Set key frame placement
        -keyint_min 25 \                                                # Set minimum interval between IDR-frame
        -sc_threshold 0 \                                               # Sets the threshold for the scene change detection.
        -flags +global_header \                                         # Set global header in the bitstream.
   -map a:0 -ac 2 -c:a:0 aac -b:a:0 96K \                               # Audio track predefined low bitrate
        -metadata:s:a:0 language=dut \                                  # FFmpeg expects ISO_639-2_codes for language
   -map a:0 -ac 2 -c:a:1 aac -b:a:1 128K \                              # Audio track with user defined bitrate
        -metadata:s:a:1 language=dut \                                  # FFmpeg expects ISO_639-2_codes for language
   -map 0:s:0 -c:s webvtt \                                             # Set subtitle codec webvtt
   -f tee \                                                             # Tee muxer to duplicate the output to multiple files
       "[select=\'a:0,a:1,v:0,v:1\': \                                  # Create fragmented MP4 (fmp4) output for hls and dash
          f=dash: \
          seg_duration=6: \
          hls_playlist=true: \
          single_file=true: \
          adaptation_sets=\'id=0,streams=0,1 id=1,streams=2,3\': \
          media_seg_name=\'stream_vod_$RepresentationID$-$Number%05d$.$ext$\': \
          hls_master_name=master_vod.m3u8]../vod/10100_20231012201900/manifest_vod.mpd| \
         [select=\'v:0,s:0\': \                                         # Trick to create fragmented vtt files, video is used as a heartbeat
          strftime=1: \
          hls_flags=+independent_segments+iframes_only: \
          hls_time=6: \
          hls_playlist_type=event: \
          hls_segment_type=fmp4: \
          var_stream_map=\'v:0,s:0,sgroup:subtitle\': \
          hls_segment_filename=\'/dev/null\']../vod/10100_20231012201900/sub_%v.m3u8| \ # Video output to /dev/null since it is not required. vtt output is written to vod directory
         [select=\'v:0,a:1\': \                                         # Create mp4 output
          f=mp4: \
          movflags=+faststart]10100_20231012201900/10100_20231012201900.mp4| \
         /dev/null| \                                                   # Since live was not selected by the user, /dev/null is used
         [select=\'a:0,a:1,v:0,v:1\': \                                 # Create fragmented mp4 output for event
          f=hls: \
          hls_time=6: \
          hls_playlist_type=event: \
          hls_flags=+independent_segments+iframes_only: \
          hls_segment_type=fmp4: \
          var_stream_map=\'v:0,agroup:aac,language:dut,name:720p v:1,agroup:aac,language:dut,name:480p a:0,agroup:aac,language:dut,name:aac_1_96K a:1,agroup:aac,language:dut,name:aac_2_128K\': \
          master_pl_name=master_event.m3u8:hls_segment_filename=10100_20231012201900/stream_event_%v_data%02d.m4s]10100_20231012201900/stream_event_%v.m3u8| \
         [select=\'v:0,s:0\': \                                         # Trick to create fragmented vtt files, video is used as a heartbeat
          strftime=1: \
          f=hls: \
          hls_flags=+independent_segments+program_date_time: \
          hls_time=6: \
          hls_playlist_type=event: \
          hls_segment_type=fmp4: \
          var_stream_map=\'v:0,s:0,sgroup:subtitle\': \
          hls_segment_filename=\'/dev/null\']10100_20231012201900/sub_%v.m3u8" \  # Video output to /dev/null since it is not required. vtt output is written to hls directory
2>>/tmp/ffmpeg-hls-10100_20231012201900.log && /usr/bin/sudo -uapache /usr/bin/bash -c '/usr/bin/echo `date`: encode finish success >> /var/www/html/hls/10100_20231012201900/status.txt' || /usr/bin/sudo -uapache /usr/bin/bash -c '/usr/bin/echo `date`: encode finish failed >> /var/www/html/hls/10100_20231012201900/status.txt'
while [ ! "`/usr/bin/cat /var/www/html/hls/10100_20231012201900/status.txt | /usr/bin/grep 'encode finish success'`" ] ; \
do \
    sleep 1; \
done
#+end_src

** Post-processing merge subtitles into $MP4$
:PROPERTIES:
:ID:       eaff4fbb-a7ad-4110-8b9e-a63ac48babb2
:END:

Post-processing step, merging subtitles into the $MP4$ file.

#+begin_src shell +n
cd /var/www/html/hls/10100_20231012201900; \
/usr/bin/sudo -uapache /usr/bin/bash -c '/usr/bin/echo `date`: subtitle_merge start >> /var/www/html/hls/10100_20231012201900/status.txt'; \
cd /var/www/html/hls/10100_20231012201900; \
/usr/bin/sudo -uapache /usr/bin/ffmpeg \
    -i 10100_20231012201900.mp4 \
    -i subtitles.vtt \
    -c:s mov_text -metadata:s:s:0 language=dut -disposition:s:0 default \
    -c:v copy \
    -c:a copy \
    10100_20231012201900.tmp.mp4; \
/usr/bin/sudo /usr/bin/mv -f 10100_20231012201900.tmp.mp4 10100_20231012201900.mp4 2>>/tmp/ffmpeg-subtitle-merge-hls-10100_20231012201900.log && /usr/bin/sudo -uapache /usr/bin/bash -c '/usr/bin/echo `date`: subtitle_merge success >> /var/www/html/hls/10100_20231012201900/status.txt' || /usr/bin/sudo -uapache /usr/bin/bash -c '/usr/bin/echo `date`: subtitle_merge failed >> /var/www/html/hls/10100_20231012201900/status.txt'
while [ ! "`/usr/bin/cat /var/www/html/hls/10100_20231012201900/status.txt | /usr/bin/grep 'encode finish success'`" ] ; \
do \
    sleep 1; \
done
/usr/bin/sudo /usr/bin/rm /var/www/html/hls/10100_20231012201900/video.mp4
sleep 3 && /usr/bin/sudo /usr/bin/screen -ls 10100_20231012201900_encode  | /usr/bin/grep -E '\s+[0-9]+.' | /usr/bin/awk '{print $1}' - | while read s; do /usr/bin/sudo /usr/bin/screen -XS $s quit; done
#+end_src
* Appendix
:PROPERTIES:
:ID:       6bb99dfc-33a0-4fff-b020-b971b04b6516
:END:
** Bibliography
:PROPERTIES:
:ID:       27e51f85-0b71-42eb-865f-6733b87f9649
:END:
** Credits
:PROPERTIES:
:ID:       ba20e848-8512-4d4a-906b-3804bd04c03d
:END:
* Contributing
:PROPERTIES:
:ID:       d84a5300-d3a6-44cc-9cc9-d7f634ae530b
:END:
** Open issues
:PROPERTIES:
:ID:       3e145ddb-7f97-4366-bb1f-8a21a41426e2
:END:

- [X] Check for duplicate audio bitrates before using them.
- [X] Check support for nld and dut
- [X] Check if different audit bitrates make sense, since player do not support
  this? With Safari false one can choose between different audio bitrates.
- [X] Check support for multiple languages / subtitles
- [ ] Test if FFmpeg from MythTV can be used!?
- [ ] Add a description of the installation process and dependencies on
  libraries / applications (mediainfo, curl, screen, etc)
- [ ] Look at MythTV v0.34 and integration options
- [ ] How to check which bitrate the player is using?
- [ ] Check if different bitrates per resolution make sense, since player does not
  show them in the UI?
- [ ] Check if one can control the web app from a user job
- [ ] Check if one can start a user job at the start of a recording
- [ ] Try to add video title to mp4, see [[https://abdus.dev/posts/ffmpeg-metadata/][Adding metadata to video]], see
  [[https://superuser.com/questions/1208273/how-to-add-new-and-non-defined-metadata-to-an-mp4-file][Add
  metadata to MP4 file]]
- [ ] Prevent runtime error, detect empty .vtt file, containing WEBVVT
- [ ] FFmpeg two-pass ABR, see [[https://stackoverflow.com/questions/12480902/how-to-use-ffmpeg-x264-2-pass-encoding-for-multiple-bitrate-output-files][How to use ffmpeg / x264 2-Pass encoding for
  multiple bitrate output files]]
- [ ] Replace mediainfo with ffprobe to reduce the number of dependencies.
- [ ] Replace linux command line tools with native php code.

Report issues and suggest features and improvements on the [[https://github.com/alders/mythtv-stream-hls-dash/issues][GitHub issue tracker]].

** Patches
:PROPERTIES:
:ID:       c9f4af00-b166-42c9-982d-0b85490f1559
:END:
I love contributions! Patches under any form are always welcome!
